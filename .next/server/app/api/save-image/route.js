"use strict";(()=>{var e={};e.id=308,e.ids=[308],e.modules={517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},1017:e=>{e.exports=require("path")},1065:(e,a,s)=>{s.r(a),s.d(a,{headerHooks:()=>f,originalPathname:()=>_,requestAsyncStorage:()=>g,routeModule:()=>d,serverHooks:()=>v,staticGenerationAsyncStorage:()=>l,staticGenerationBailout:()=>h});var r={};s.r(r),s.d(r,{POST:()=>POST});var t=s(884),i=s(6132),o=s(5798);let u=require("fs");var n=s.n(u),p=s(1017),c=s.n(p);let m=require("fs/promises");async function POST(e){try{let a=await e.json(),s=a.imageData;if(!s)return o.Z.json({success:!1,message:"No image data provided"},{status:400});let r=s.replace(/^data:image\/\w+;base64,/,""),t=Buffer.from(r,"base64"),i=c().join(process.cwd(),"public","images");n().existsSync(i)||await (0,m.mkdir)(i,{recursive:!0});let u=c().join(i,"profile.jpg");return n().writeFileSync(u,t),o.Z.json({success:!0,message:"Image saved successfully",path:"/images/profile.jpg"})}catch(e){return console.error("Error saving image:",e),o.Z.json({success:!1,message:e.message||"Failed to save image"},{status:500})}}let d=new t.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/save-image/route",pathname:"/api/save-image",filename:"route",bundlePath:"app/api/save-image/route"},resolvedPagePath:"C:\\Users\\medah\\Code\\medahad.github.io\\app\\api\\save-image\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:g,staticGenerationAsyncStorage:l,serverHooks:v,headerHooks:f,staticGenerationBailout:h}=d,_="/api/save-image/route"}};var a=require("../../../webpack-runtime.js");a.C(e);var __webpack_exec__=e=>a(a.s=e),s=a.X(0,[997],()=>__webpack_exec__(1065));module.exports=s})();